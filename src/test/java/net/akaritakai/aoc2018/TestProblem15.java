package net.akaritakai.aoc2018;

import java.util.List;
import org.testng.Assert;
import org.testng.annotations.Test;


public class TestProblem15 extends BasePuzzleTest {

  @Test
  public void testProblemPart1Example1() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#.G...#",
        "#...EG#",
        "#.#.#G#",
        "#..G#E#",
        "#.....#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart1(), "27730");
  }

  @Test
  public void testProblemPart1Example2() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#G..#E#",
        "#E#E.E#",
        "#G.##.#",
        "#...#E#",
        "#...E.#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart1(), "36334");
  }

  @Test
  public void testProblemPart1Example3() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#E..EG#",
        "#.#G.E#",
        "#E.##E#",
        "#G..#.#",
        "#..E#.#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart1(), "39514");
  }

  @Test
  public void testProblemPart1Example4() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#E.G#.#",
        "#.#G..#",
        "#G.#.G#",
        "#G..#.#",
        "#...E.#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart1(), "27755");
  }

  @Test
  public void testProblemPart1Example5() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#.E...#",
        "#.#..G#",
        "#.###.#",
        "#E#G#G#",
        "#...#G#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart1(), "28944");
  }

  @Test
  public void testProblemPart1Example6() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#########",
        "#G......#",
        "#.E.#...#",
        "#..##..G#",
        "#...##..#",
        "#...#...#",
        "#.G...G.#",
        "#.....G.#",
        "#########"
    )));
    Assert.assertEquals(problem.solvePart1(), "18740");
  }

  @Test
  public void testProblemPart1Other1() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a70kfe/day_15_part_1_not_working/
    // It seems to contain a very tricky situation for movement.
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#################.....##########",
            "#################..#.###########",
            "#################.........######",
            "##################......########",
            "#################G.GG###########",
            "###############...#..###########",
            "###############......G..########",
            "############..G.........########",
            "##########.G.....G......########",
            "##########......#.........#..###",
            "##########...................###",
            "#########G..G.#####....E.G.E..##",
            "######..G....#######...........#",
            "#######.....#########.........##",
            "#######..#..#########.....#.####",
            "##########..#########..G.##..###",
            "###########G#########...E...E.##",
            "#########.G.#########..........#",
            "#########GG..#######.......##.E#",
            "######.G......#####...##########",
            "#...##..G..............#########",
            "#...#...........###..E.#########",
            "#.G.............###...##########",
            "#................###############",
            "##.........E.....###############",
            "###.#..............#############",
            "###..G........E.....############",
            "###......E..........############",
            "###......#....#E#...############",
            "###....####.#...##.#############",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "191216");
  }

  @Test
  public void testProblemPart1Other2() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6iymj/day_15_frustrating/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "###########################..###",
            "##########################...###",
            "#########################..#####",
            "####...##################.######",
            "#####..################...#.####",
            "#..G...G#########.####G.....####",
            "#.......########.....G.......###",
            "#.....G....###G....#....E.....##",
            "####...##......##.............##",
            "####G...#.G...###.G...........##",
            "####G.......................####",
            "####.........G#####.........####",
            "####...GG#...#######.......#####",
            "###.........#########G....######",
            "###.G.......#########G...#######",
            "###.G.......#########......#####",
            "####.....G..#########....E..####",
            "#####.......#########..E....####",
            "######...##G.#######........####",
            "######.#.#.G..#####.....##..####",
            "########....E...........##..####",
            "########....E#######........####",
            "########......######E....##..E.#",
            "########......#####.....#......#",
            "########.....######............#",
            "##################...#.E...E...#",
            "##################.............#",
            "###################.......E#####",
            "####################....#...####",
            "####################.###########",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "264384");
  }

  @Test
  public void testProblemPart1Other3() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6dp5v/2018_day_15_part1_cant_get_the_right_answer/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#######.G...####################",
            "#########...####################",
            "#########.G.####################",
            "#########.######################",
            "#########.######################",
            "#########G######################",
            "#########.#...##################",
            "#########.....#..###############",
            "########...G....###.....########",
            "#######............G....########",
            "#######G....G.....G....#########",
            "######..G.....#####..G...#######",
            "######...G...#######......######",
            "#####.......#########....G..E###",
            "#####.####..#########G...#....##",
            "####..####..#########..G....E..#",
            "#####.####G.#########...E...E.##",
            "#########.E.#########.........##",
            "#####........#######.E........##",
            "######........#####...##...#..##",
            "###...................####.##.##",
            "###.............#########..#####",
            "#G#.#.....E.....#########..#####",
            "#...#...#......##########.######",
            "#.G............#########.E#E####",
            "#..............##########...####",
            "##..#..........##########.E#####",
            "#..#G..G......###########.######",
            "#.G.#..........#################",
            "#...#..#.......#################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "248848");
  }

  @Test
  public void testProblemPart1Other4() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6dp5v/2018_day_15_part1_cant_get_the_right_answer/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#############################..#",
            "#############################..#",
            "#############################..#",
            "###########################...##",
            "##########################..####",
            "###########..#G.#########G..####",
            "#########G........#######....###",
            "#########...G.......G##........#",
            "#######G.................E...###",
            "#######.####...####..G..#...####",
            "######...#.........G..###....###",
            "#####....#....#####...####...###",
            "####.........#######.....#....##",
            "#.G..G.G..#G#########...G.....##",
            "#.###.......#########........###",
            "#...G.......#########..E.E..####",
            "#..G........#########......#####",
            "#....G...E.E#########......#####",
            "#........E...#######....########",
            "#......#...G..#####...E....#####",
            "#.........G................#####",
            "#..........G....####....########",
            "#................###....########",
            "#..........G......######.#######",
            "#.............###.##.....#######",
            "##......#....####E...E.....#####",
            "##......##...###.E.#..##.#######",
            "##...####..#####....############",
            "###..###...#######..############",
            "###..###..######################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "195774");
  }

  @Test
  public void testProblemPart1Other5() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6rhzw/help_need_help_with_day_15_part_1/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#########.####...#####.#########",
            "#####...#G...#.G.##.#...##.##..#",
            "####...G####.G....#..........E.#",
            "#####..#######.................#",
            "#####..###########.............#",
            "#GG...############.............#",
            "#...#.#.##..######..........#..#",
            "##............#G.#..E.......####",
            "##.G........#....#.........#####",
            "###....G...................#####",
            "###............G.....G.......###",
            "#####.....#..G#####..........###",
            "####..#......#######G...#.E..E##",
            "####G##.G...#########.#.......##",
            "###..###....#########...E....###",
            "##...G......#########.E...######",
            "##G.........#########......#####",
            "##...#.G....#########.#...######",
            "##...#.......#######E.##########",
            "####.#........#####...##########",
            "#######............E..##########",
            "####..#...........E#############",
            "##...G#...........##############",
            "##........#.......##############",
            "#####G..###..E..################",
            "##########......################",
            "##########.....#################",
            "#########......#################",
            "###########.....################",
            "###########...##################",
            "################################"
    )));
    // This is my assumption for the answer, it hasn't been validated by an external party yet
    Assert.assertEquals(problem.solvePart1(), "261855");
  }

  @Test
  public void testProblemPart1Other6() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6yleq/2018_day_15_part_2_my_solution_seems_to_work_for/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "####.#######..G..########.....##",
            "##...........G#..#######.......#",
            "#...#...G.....#######..#......##",
            "########.......######..##.E...##",
            "########......G..####..###....##",
            "#...###.#.....##..G##.....#...##",
            "##....#.G#....####..##........##",
            "##..#....#..#######...........##",
            "#####...G.G..#######...G......##",
            "#########.GG..G####...###......#",
            "#########.G....EG.....###.....##",
            "########......#####...##########",
            "#########....#######..##########",
            "#########G..#########.##########",
            "#########...#########.##########",
            "######...G..#########.##########",
            "#G###......G#########.##########",
            "#.##.....G..#########..#########",
            "#............#######...#########",
            "#...#.........#####....#########",
            "#####.G..................#######",
            "####.....................#######",
            "####.........E..........########",
            "#####..........E....E....#######",
            "####....#.......#...#....#######",
            "####.......##.....E.#E...#######",
            "#####..E...####.......##########",
            "########....###.E..E############",
            "#########.....##################",
            "#############.##################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "215168");
  }

  @Test
  public void testProblemPart1Other7() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6g4nf/day_15_solution_produces_same_answer_as_two/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "###############.##...###########",
            "##############..#...G.#..#######",
            "##############.............#####",
            "###############....G....G......#",
            "##########..........#..........#",
            "##########................##..##",
            "######...##..G...G.......####..#",
            "####..G..#G...............####.#",
            "#######......G....G.....G#####E#",
            "#######.................E.######",
            "########..G...............######",
            "######....G...#####E...G....####",
            "######..G..G.#######........####",
            "###.........#########.......E.##",
            "###..#..#...#########...E.....##",
            "######......#########.......####",
            "#####...G...#########.....######",
            "#####G......#########.....######",
            "#...#G..G....#######......######",
            "###...##......#####.......######",
            "####..##..G........E...E..######",
            "#####.####.....######...########",
            "###########..#...####...E.######",
            "###############...####..#...####",
            "###############...###...#.E.####",
            "#####################.#E....####",
            "#####################.#...######",
            "###################...##.#######",
            "##################..############",
            "##################...###########",
            "################################"
    )));
    // This is my assumption for the answer, it hasn't been validated by an external party yet
    Assert.assertEquals(problem.solvePart1(), "229798");
  }

  @Test
  public void testProblemPart1Other8() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6g4nf/day_15_solution_produces_same_answer_as_two/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "###################........#####",
            "###################..G..#G..####",
            "####################........####",
            "##..G###############G......#####",
            "###..G###############.....######",
            "#####.######..######....G##..###",
            "#####.........####............##",
            "#########...#####.............##",
            "#########...####..............##",
            "#########E#####.......GE......##",
            "#########............E...G...###",
            "######.###....#####..G........##",
            "#.G#....##...#######.........###",
            "##.#....##GG#########.........##",
            "#....G#....E#########....#....##",
            "#...........#########.......####",
            "#####..G....#########...##....##",
            "#####....G..#########.#.......##",
            "#######...G..#######G.....#...##",
            "######....E...#####............#",
            "######...GG.......E......#...E.#",
            "#######.G...#....#..#...#.....##",
            "#######..........#####..####.###",
            "########.......E################",
            "#######..........###############",
            "########.............###########",
            "#########...#...##....##########",
            "#########.....#.#..E..##########",
            "################.....###########",
            "################.##E.###########",
            "################################"
    )));
    // This is my assumption for the answer, it hasn't been validated by an external party yet
    Assert.assertEquals(problem.solvePart1(), "189000");
  }

  @Test
  public void testProblemPart1Other9() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6jb8n/day_15_part_1python_3_get_correct_answer_for/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "##########################..####",
            "#########################...####",
            "#########################..#####",
            "########################G..#####",
            "#####################.#.....##.#",
            "#####################..........#",
            "##############.#####...........#",
            "########G...G#.####............#",
            "#######......G....#.....#......#",
            "#######...G....GG.#............#",
            "#######G.G.............####....#",
            "#######.#.....#####....E.....###",
            "#######......#######.G.......###",
            "#..####..G..#########.###..#####",
            "#........G..#########.##########",
            "#..#..#G....#########.##########",
            "#.###...E...#########.##########",
            "#####...G.G.#########.##########",
            "########G....#######..##########",
            "####..........#####...##########",
            "####......E........G..##########",
            "#.G..................###########",
            "#G...................###########",
            "###.....##E.......E..###########",
            "###....#............############",
            "###.................############",
            "##G.....#.............##########",
            "###########...#E..##..##########",
            "###########.E...###.E.EE.#######",
            "###########......#.......#######",
            "################################"
    )));
    // This is my assumption for the answer, it hasn't been validated by an external party yet
    Assert.assertEquals(problem.solvePart1(), "225096");
  }


  @Test
  public void testProblemPart1Other10() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6fl4q/day_15_code_working_with_samples_and_some_others/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#######..##########.##.G.##.####",
            "#######...#######........#..####",
            "#######..G.######..#...##G..####",
            "########..G###........G##...####",
            "######....G###....G....###.#####",
            "######....####..........##..####",
            "#######...###...........##..E..#",
            "#######.G..##...........#.#...##",
            "######....#.#.....#..GG......###",
            "#####..#..G...G........G.#....##",
            "##########.G.......G........####",
            "#########.G.G.#####EE..E...#####",
            "#########....#######.......#####",
            "#########...#########.......####",
            "########....#########...G...####",
            "#########...#########.#....#####",
            "##########..#########.#E...E####",
            "######....#.#########........#.#",
            "######..G.#..#######...........#",
            "#####.........#####.E......#####",
            "####........................####",
            "####.........G...####.....######",
            "##................##......######",
            "##..........##.##.........######",
            "#............########....E######",
            "####..........#######.E...######",
            "####........#..######...########",
            "########....#.E#######....######",
            "#########...####################",
            "########....####################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "214731");
  }

  @Test
  public void testProblemPart1Other11() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6fl4q/day_15_code_working_with_samples_and_some_others/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#########.####...#####.#########",
            "#####...#G...#.G.##.#...##.##..#",
            "####...G####.G....#..........E.#",
            "#####..#######.................#",
            "#####..###########.............#",
            "#GG...############.............#",
            "#...#.#.##..######..........#..#",
            "##............#G.#..E.......####",
            "##.G........#....#.........#####",
            "###....G...................#####",
            "###............G.....G.......###",
            "#####.....#..G#####..........###",
            "####..#......#######G...#.E..E##",
            "####G##.G...#########.#.......##",
            "###..###....#########...E....###",
            "##...G......#########.E...######",
            "##G.........#########......#####",
            "##...#.G....#########.#...######",
            "##...#.......#######E.##########",
            "####.#........#####...##########",
            "#######............E..##########",
            "####..#...........E#############",
            "##...G#...........##############",
            "##........#.......##############",
            "#####G..###..E..################",
            "##########......################",
            "##########.....#################",
            "#########......#################",
            "###########.....################",
            "###########...##################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart1(), "261855");
  }

  @Test
  public void testProblemPart1() throws Exception {
    final var problem = new Problem15();
    problem.setPuzzleInput(getStoredInput(problem.getDay()));
    Assert.assertEquals(problem.solvePart1(), "190777");
  }

  @Test
  public void testProblemPart2Example1() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#.G...#",
        "#...EG#",
        "#.#.#G#",
        "#..G#E#",
        "#.....#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart2(), "4988");
  }

  @Test
  public void testProblemPart2Example2() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#E..EG#",
        "#.#G.E#",
        "#E.##E#",
        "#G..#.#",
        "#..E#.#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart2(), "31284");
  }

  @Test
  public void testProblemPart2Example3() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#E.G#.#",
        "#.#G..#",
        "#G.#.G#",
        "#G..#.#",
        "#...E.#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart2(), "3478");
  }
  @Test
  public void testProblemPart2Example4() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#######",
        "#.E...#",
        "#.#..G#",
        "#.###.#",
        "#E#G#G#",
        "#...#G#",
        "#######"
    )));
    Assert.assertEquals(problem.solvePart2(), "6474");
  }

  @Test
  public void testProblemPart2Example5() {
    final var problem = new Problem15();
    problem.setPuzzleInput(String.join("\n", List.of(
        "#########",
        "#G......#",
        "#.E.#...#",
        "#..##..G#",
        "#...##..#",
        "#...#...#",
        "#.G...G.#",
        "#.....G.#",
        "#########"
    )));
    Assert.assertEquals(problem.solvePart2(), "1140");
  }

  @Test
  public void testProblemPart2Other1() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6yleq/2018_day_15_part_2_my_solution_seems_to_work_for/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "####.#######..G..########.....##",
            "##...........G#..#######.......#",
            "#...#...G.....#######..#......##",
            "########.......######..##.E...##",
            "########......G..####..###....##",
            "#...###.#.....##..G##.....#...##",
            "##....#.G#....####..##........##",
            "##..#....#..#######...........##",
            "#####...G.G..#######...G......##",
            "#########.GG..G####...###......#",
            "#########.G....EG.....###.....##",
            "########......#####...##########",
            "#########....#######..##########",
            "#########G..#########.##########",
            "#########...#########.##########",
            "######...G..#########.##########",
            "#G###......G#########.##########",
            "#.##.....G..#########..#########",
            "#............#######...#########",
            "#...#.........#####....#########",
            "#####.G..................#######",
            "####.....................#######",
            "####.........E..........########",
            "#####..........E....E....#######",
            "####....#.......#...#....#######",
            "####.......##.....E.#E...#######",
            "#####..E...####.......##########",
            "########....###.E..E############",
            "#########.....##################",
            "#############.##################",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart2(), "52374");
  }

  @Test
  public void testProblemPart2Other2() {
    final var problem = new Problem15();
    // This input came from https://www.reddit.com/r/adventofcode/comments/a6ev8l/day_15_pt2_possible_input_issue/
    problem.setPuzzleInput(String.join("\n", List.of(
            "################################",
            "#######################.########",
            "######################....######",
            "#######################.....####",
            "##################..##......####",
            "###################.##.....#####",
            "###################.....G..#####",
            "##################.....G...#####",
            "############.....GG.G...#..#####",
            "##############...##....##.######",
            "############...#..G............#",
            "###########......E.............#",
            "###########...#####..E........##",
            "#...#######..#######.......#####",
            "#..#..G....G#########.........##",
            "#..#....G...#########..#....####",
            "##.....G....#########.E......###",
            "#####G.....G#########..E.....###",
            "#####.......#########....#.....#",
            "#####G#G....G#######.......#..E#",
            "###.....G.....#####....#.#######",
            "###......G.....G.G.......#######",
            "###..................#..########",
            "#####...................########",
            "#####..............#...#########",
            "####......G........#.E.#E..#####",
            "####.###.........E...#E...######",
            "####..##........#...##.....#####",
            "########.#......######.....#####",
            "########...E....#######....#####",
            "#########...##..########...#####",
            "################################"
    )));
    Assert.assertEquals(problem.solvePart2(), "47296");
  }

  @Test
  public void testProblemPart2() throws Exception {
    final var problem = new Problem15();
    problem.setPuzzleInput(getStoredInput(problem.getDay()));
    Assert.assertEquals(problem.solvePart2(), "47388");
  }
}
